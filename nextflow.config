/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    scRNAseq-cellcomm Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs

params {
    init_step                   = 1
    // General input files
    input_file                  = 'empty.txt'
    metadata_csv                = 'empty.txt'
    metadata_rds                = 'empty.txt'

    // Pre-processing (+ some variables reused in inference CCI)
    annot                       = 'cell_type'
    min_cells                   = 100
    sample_var                  = 'Sample'

    // Interaction databases
    cellphone_db                = "${projectDir}/data/interactions_db/cellphonedb.zip"
    cellchat_db                 = "${projectDir}/data/interactions_db/cellchat_db.rds"
    liana_db                    = "${projectDir}/data/interactions_db/liana_db.rds"
    cell2cell_db                = "${projectDir}/data/interactions_db/cell2cell_db.csv"
    ref_db                      = "${projectDir}/data/interactions_db/ref_db.rds"

    // Configuration for inference of CCIs 
    min_pct                     = 0.1
    n_perm                      = 1000
    condition_var               = 'Condition_dummy'
    patient_var                 = 'Patient'
    is_confident                = 0

    // Consensus/aggregation
    min_patients                = 2
    alpha                       = 0.05
    interactions_excel_name     = "interactions_summary"

    // Skipping modules
    skip_reduction              = false

    // Storing log-files produced by Nexflow
    outdir                      = "${projectDir}/nf-logs"
    output_dir                  = "${projectDir}/output"

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    custom_config = "${projectDir}/nf-config/gaitilab.config"
}

// Load base.config by default for all pipelines
includeConfig 'nf-config/base.config'

// Load custom configuration (overrides base.config)
try {
    includeConfig "${params.custom_config}"
} catch (Exception e) {
    System.err.println("WARNING: Could not load custom local profile: ${params.custom_config}")
}

// Profiles 
profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = false
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = false
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

// env {
//     PYTHONNOUSERSITE = 1
//     R_PROFILE_USER   = "/.Rprofile"
//     R_ENVIRON_USER   = "/.Renviron"
//     JULIA_DEPOT_PATH = "/usr/local/share/julia"
// }

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'scrnaseq-cellcomm-pipeline'
    author          = 'GaitiLab UHN'
    homePage        = 'https://github.com/GaitiLab/scrnaseq-cellcomm-pipeline'
    description     = 'Pipeline for inferring cell-cell interactions from scRNAseq data using multiple publicly available tools'
    mainScript      = 'main.nf'
    nextflowVersion = '23.04.3'
    version         = '1.0.0'
    doi             = 't.b.d.'
}

// Load modules.config for DSL2 module specific options
includeConfig 'nf-config/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}