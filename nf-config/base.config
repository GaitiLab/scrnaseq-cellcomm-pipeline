// nf-config/base.config
/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }

    // Memory labels
    withLabel:mem_4G {
        memory = { check_max( 4.GB * task.attempt, 'memory'  ) }
        queue  = { assign_queue ( 4.GB * task.attempt )}
    }

    withLabel:mem_8G {
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        queue  = { assign_queue ( 8.GB * task.attempt )}

    }

    withLabel:mem_16G {
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        queue  = { assign_queue ( 16.GB * task.attempt )}

    }

    withLabel:mem_32G {
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        queue  = { assign_queue ( 32.GB * task.attempt )}

    }

    withLabel:mem_64G {
        memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
        queue  = { assign_queue ( 64.GB * task.attempt )}

    }

    withLabel:mem_128G {
        memory = { check_max( 128.GB * task.attempt, 'memory'  ) }
        queue  = { assign_queue ( 128.GB * task.attempt )}

    }

    // Time label
    withLabel:time_10m {
        time   = { check_max( 10.m   * task.attempt, 'time'    ) }
    }

    withLabel:time_30m {
        time   = { check_max( 30.m   * task.attempt, 'time'    ) }
    }

    withLabel:time_1h {
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    
    withLabel:time_2h {
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }

    withLabel:time_4h {
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }

    withLabel:time_8h {
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }

    withLabel:time_12h {
        time   = { check_max( 12.h   * task.attempt, 'time'    ) }
    }

    withLabel:time_24h {
        time   = { check_max( 1.d   * task.attempt, 'time'    ) }
    }
}

def assign_queue (mem){
    def queue = ""
    switch ( mem  ) {
            case { it > 185.GB }:
                queue = 'superhimem'
                break
            case { it > 61.4.GB }:
                queue = 'veryhimem'
                break
            case { it > 30.72.GB }:
                queue = 'himem'
                break
            default: 
                queue = 'all'
                break
        }
    return queue
}